# GenAI_Algorithm_lab1 ==> 二元搜尋樹的各種實作(heap sort)
- `提問詞`:請寫出二元搜尋樹的演算法
- `提問詞`:請計算二元搜尋樹演算法的時間複雜度
- `提問詞`:請用Python寫出二元搜尋樹的演算法
- `提問詞`:請用C寫出二元搜尋樹的演算法
- `提問詞`:請用C++寫出二元搜尋樹的演算法
- `提問詞`:請用JAVA寫出二元搜尋樹的演算法
- `提問詞`:請用Rust寫出二元搜尋樹的演算法
- `提問詞`:請用go寫出二元搜尋樹的演算法
- `提問詞`:請用C#寫出二元搜尋樹的演算法
- `提問詞`:請用Javascript#寫出二元搜尋樹的演算法
## 二元搜尋樹（Binary Search Tree, BST）
## python 實作
class TreeNode:
    def __init__(self, value):
        self.data = value
        self.left = None
        self.right = None

def insert(root, value):
    if root is None:
        return TreeNode(value)
    if value <= root.data:
        root.left = insert(root.left, value)
    else:
        root.right = insert(root.right, value)
    return root

def inorder_traversal(root):
    if root:
        inorder_traversal(root.left)
        print(root.data, end=" ")
        inorder_traversal(root.right)

if __name__ == "__main__":
    root = None
    data = [10, 5, 15, 3, 7]
    for value in data:
        root = insert(root, value)

    print("中序遍歷結果：", end="")
    inorder_traversal(root)
    print()
